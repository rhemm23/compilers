/**********************************************************************
 Java CUP specification for a parser for b programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                RECEIVE;
terminal                PRINT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		            REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;

/*
 * Nonterminals
 */
non terminal ProgramNode      program;
non terminal FnBodyNode       fnBody;

/*
 * List nodes
 */
non terminal ExpListNode      expList;
non terminal StmtListNode     stmtList;
non terminal DeclListNode     declList;
non terminal FormalsListNode  formalsList;

/*
 * Declarations
 */
non terminal DeclNode         decl;
non terminal FnDeclNode       fnDecl;
non terminal VarDeclNode      varDecl;
non terminal FormalDeclNode   formalDecl;
non terminal StructDeclNode   structDecl;

/*
 * Type nodes
 */
non terminal TypeNode         type;
non terminal IntNode          int;
non terminal BoolNode         bool;
non terminal VoidNode         void;
non terminal StructNode       struct;

/*
 * Statement nodes
 */
 non terminal StmtNode          stmt;
 non terminal AssignStmtNode    assignStmt;
 non terminal PreIncStmtNode    preIncStmt;
 non terminal PreDecStmtNode    preDecStmt;
 non terminal ReceiveStmtNode   receiveStmt;
 non terminal PrintStmtNode     printStmt;
 non terminal IfStmtNode        ifStmt;
 non terminal IfElseStmtNode    ifElseStmt;
 non terminal WhileStmtNode     whileStmt;
 non terminal RepeatStmtNode    repeatStmt;
 non terminal CallStmtNode      callStmt;
 non terminal ReturnStmtNode    returnStmt;
 
 /*
  * Expression nodes
  */
non terminal ExpNode        exp;
non terminal IntLitNode     intLit;
non terminal StrLitNode     strLit;
non terminal TrueNode       true;
non terminal FalseNode      false;
non terminal IdNode         id;
non terminal DotAccessNode  dotAccess;
non terminal AssignNode     assign;
non terminal CallExpNode    callExp;
non terminal UnaryExpNode   unaryExp;
non terminal UnaryMinusNode unaryMinus;
non terminal NotNode        not;
non terminal BinaryExpNode  binaryExp;
non terminal PlusNode       plus;
non terminal MinusNode      minus;
non terminal TimesNode      times;
non terminal DivideNode     divide;
non terminal AndNode        and;
non terminal OrNode         or;
non terminal EqualsNode     equals;
non terminal NotEqualsNode  notEquals;
non terminal LessNode       less;
non terminal GreaterNode    greater;
non terminal LessEqNode     lessEqual;
non terminal GreaterEqNode  greaterEqual;

/* NOTE: Add precedence and associativity declarations here */

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList:d
                {:
                  RESULT = new ProgramNode(d);
                :};

decl            ::= varDecl:v
                {:
                  RESULT = v;
                :};

varDecl         ::= type:t id:i SEMICOLON
                {:
                  RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :};

type            ::= INT
                {: RESULT = new IntNode();
                :}
                ;

/*
 * Grammar for leaf nodes
 */
id              ::= ID:i
                {:
                  RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :};

int             ::= INT
                {:
                  RESULT = new IntNode();
                :};

true            ::= TRUE
                {:
                  RESULT = new TrueNode();
                :};

bool            ::= BOOL
                {:
                  RESULT = new BoolNode();
                :};

void            ::= VOID
                {:
                  RESULT = new VoidNode();
                :};

false           ::= FALSE
                {:
                  RESULT = new FalseNode();
                :};

intLit          ::= INTLITERAL:il
                {:
                  RESULT = new IntLitNode(il.linenum, il.charnum, il.intVal);
                :};

strLit          ::= STRINGLITERAL:s
                {:
                  RESULT = new StrLitNode(s.linenum, s.charnum, s.strVal);
                :};

/*
 * Grammar for list nodes
 */
expList       ::= expList:el 

declList      ::= declList:dl decl:d
              {:
                dl.add(d);
                RESULT = dl;
              :}
              |
              {: 
                RESULT = new DeclListNode();
              :};