/**********************************************************************
 Java CUP specification for a parser for b programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

  public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
      ErrMsg.fatal(0, 0, "Syntax error at end of file");
    } else {
      TokenVal token = (TokenVal)currToken.value;
      ErrMsg.fatal(token.linenum, token.charnum, "Syntax error");
    }
    System.exit(-1);
  }
:};


/*
 * Terminal symbols
 */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                RECEIVE;
terminal                PRINT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;

/*
 * Non-terminal symbols
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal LinkedList       varDeclList;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode       fnDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       structBody;
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          exp;
non terminal ExpNode          term;
non terminal CallExpNode      fncall;
non terminal LinkedList       actualList;
non terminal TypeNode         type;
non terminal ExpNode          loc;
non terminal IdNode           id;

precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT;

start with program;

program         ::= declList:dl
                {:
                  RESULT = new ProgramNode(new DeclListNode(dl));
                :};

declList        ::= declList:dl decl:d
                {:
                  dl.add(d);
                  RESULT = dl;
                :}
                |
                {:
                  RESULT = new LinkedList<DeclNode>();
                :};

decl            ::= varDecl:v
                {:
                  RESULT = v;
                :}
                | fnDecl:fn
                {:
                  RESULT = fn;
                :}
                | structDecl:st
                {:
                  RESULT = st;
                :};

varDeclList     ::= varDeclList:vdl varDecl:v
                {:
                  vdl.add(v);
                  RESULT = vdl;
                :}
                |
                {:
                  RESULT = new LinkedList<DeclNode>();
                :};

varDecl         ::= type:t id:i SEMICOLON
                {:
                  RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:i1 id:i2 SEMICOLON
                {:
                  RESULT = new VarDeclNode(new StructNode(i1), i2, 0);
                :};

fnDecl          ::= type:t id:i formals:f fnBody:b
                {:
                  RESULT = new FnDeclNode(t, i, f, b);
                :};

structDecl      ::= STRUCT id:i LCURLY structBody:b RCURLY
                {:
                  RESULT = new StructDeclNode(i, new DeclListNode(b));
                :};

structBody      ::= structBody:b varDecl:v
                {:
                  b.add(v);
                  RESULT = b;
                :}
                | varDecl:v
                {:
                  LinkedList<DeclNode> vdl = new LinkedList<DeclNode>();
                  vdl.add(v);
                  RESULT = vdl;
                :};

formals         ::= LPAREN RPAREN
                {:
                  RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                | LPAREN formalsList:fl RPAREN
                {:
                  RESULT = new FormalsListNode(fl);
                :};

formalsList     ::= formalDecl:f
                {:
                  LinkedList<FormalDeclNode> formals = new LinkedList<FormalDeclNode>();
                  formals.add(f);
                  RESULT = formals;
                :}
                | formalDecl:d COMMA formalsList:fl
                {:
                  fl.addFirst(d);
                  RESULT = fl;
                :};

formalDecl      ::= type:t id:i
                {:
                  RESULT = new FormalDeclNode(t, i);
                :};

fnBody          ::= LCURLY varDeclList:vdl stmtList:sl RCURLY
                {:
                  RESULT = new FnBodyNode(new DeclListNode(vdl), new StmtListNode(sl));
                :};

stmtList        ::= stmtList:sl stmt:s
                {:
                  sl.add(s);
                  RESULT = sl;
                :}
                |
                {:
                  RESULT = new LinkedList<StmtNode>();
                :};

stmt            ::= assignExp:a SEMICOLON
                {:
                  RESULT = new AssignStmtNode(a);
                :}
                | PLUSPLUS loc:l SEMICOLON
                {:
                  RESULT = new PreIncStmtNode(l);
                :}
                | MINUSMINUS loc:l SEMICOLON
                {:
                  RESULT = new PreDecStmtNode(l);
                :}
                | RECEIVE READ loc:l SEMICOLON
                {:
                  RESULT = new ReceiveStmtNode(l);
                :}
                | PRINT WRITE exp:e SEMICOLON
                {:
                  RESULT = new PrintStmtNode(e);
                :}
                | IF exp:e LCURLY varDeclList:vl stmtList:sl RCURLY
                {:
                  RESULT = new IfStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | IF exp:e LCURLY varDeclList:v1 stmtList:s1 RCURLY ELSE LCURLY varDeclList:v2 stmtList:s2 RCURLY
                {:
                  RESULT = new IfElseStmtNode(e, new DeclListNode(v1), new StmtListNode(s1), new DeclListNode(v2), new StmtListNode(s2));
                :}
                | WHILE exp:e LCURLY varDeclList:vl stmtList:sl RCURLY
                {:
                  RESULT = new WhileStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | REPEAT exp:e LCURLY varDeclList:vl stmtList:sl RCURLY
                {:
                  RESULT = new RepeatStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | RETURN exp:e SEMICOLON
                {:
                  RESULT = new ReturnStmtNode(e);
                :}
                | RETURN SEMICOLON
                {:
                  RESULT = new ReturnStmtNode(null);
                :}
                | fncall:f SEMICOLON
                {:
                  RESULT = new CallStmtNode(f);
                :};

assignExp       ::= loc:l ASSIGN exp:e
                {:
                  RESULT = new AssignNode(l, e);
                :};

exp             ::= assignExp:a
                {:
                  RESULT = a;
                :}
                | exp:e1 PLUS exp:e2
                {:
                  RESULT = new PlusNode(e1, e2);
                :}
                | exp:e1 MINUS exp:e2
                {:
                  RESULT = new MinusNode(e1, e2);
                :}
                | exp:e1 TIMES exp:e2
                {:
                  RESULT = new TimesNode(e1, e2);
                :}
                | exp:e1 DIVIDE exp:e2
                {:
                  RESULT = new DivideNode(e1, e2);
                :}
                | NOT exp:e
                {:
                  RESULT = new NotNode(e);
                :}
                | exp:e1 AND exp:e2
                {:
                  RESULT = new AndNode(e1, e2);
                :}
                | exp:e1 OR exp:e2
                {:
                  RESULT = new OrNode(e1, e2);
                :}
                | exp:e1 EQUALS exp:e2
                {:
                  RESULT = new EqualsNode(e1, e2);
                :}
                | exp:e1 NOTEQUALS exp:e2
                {:
                  RESULT = new NotEqualsNode(e1, e2);
                :}
                | exp:e1 LESS exp:e2
                {:
                  RESULT = new LessNode(e1, e2);
                :}
                | exp:e1 GREATER exp:e2
                {:
                  RESULT = new GreaterNode(e1, e2);
                :}
                | exp:e1 LESSEQ exp:e2
                {:
                  RESULT = new LessEqNode(e1, e2);
                :}
                | exp:e1 GREATEREQ exp:e2
                {:
                  RESULT = new GreaterEqNode(e1, e2);
                :}
                | MINUS term:t
                {:
                  RESULT = new UnaryMinusNode(t);
                :}
                | term:t
                {:
                  RESULT = t;
                :};

term            ::= loc:l
                {:
                  RESULT = l;
                :}
                | INTLITERAL:il
                {:
                  RESULT = new IntLitNode(il.linenum, il.charnum, il.intVal);
                :}
                | STRINGLITERAL:sl
                {:
                  RESULT = new StringLitNode(sl.linenum, sl.charnum, sl.strVal);
                :}
                | TRUE:t
                {:
                  TokenVal token = (TokenVal)t;
                  RESULT = new TrueNode(token.linenum, token.charnum);
                :}
                | FALSE:f
                {:
                  TokenVal token = (TokenVal)f;
                  RESULT = new FalseNode(token.linenum, token.charnum);
                :}
                | LPAREN exp:e RPAREN
                {:
                  RESULT = e;
                :}
                | fncall:f
                {:
                  RESULT = f;
                :};

fncall          ::= id:i LPAREN RPAREN
                {:
                  RESULT = new CallExpNode(i);
                :}
                | id:i LPAREN actualList:l RPAREN
                {:
                  RESULT = new CallExpNode(i, new ExpListNode(l));
                :};

actualList      ::= exp:e
                {:
                  LinkedList<ExpNode> el = new LinkedList<ExpNode>();
                  el.add(e);
                  RESULT = el;
                :}
                | actualList:el COMMA exp:e
                {:
                  el.add(e);
                  RESULT = el;
                :};

type            ::= INT
                {:
                  RESULT = new IntNode();
                :}
                | BOOL
                {:
                  RESULT = new BoolNode();
                :}
                | VOID
                {:
                  RESULT = new VoidNode();
                :};

loc             ::= id:i
                {:
                  RESULT = i;
                :}
                | loc:l DOT id:i
                {:
                  RESULT = new DotAccessExpNode(l, i);
                :};
            
id              ::= ID:i
                {:
                  RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :};
